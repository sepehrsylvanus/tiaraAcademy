// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

enum Role {
  teacher
  admin
  student
  adminTeacher
}

enum WritingStatus {
  checked
  pending
}

enum NotifStat {
  read
  unread
}

enum Type {
  private
  public
}

enum NotifType {
  register
  joinClass
  videoCourse
  writing
}

enum PaymentType {
  class
  playlist
  writingCharge
  placement
}

enum CommentType {
  comment
  question
}

enum VideoCourseCat {
  english
  spanish
  general
}

enum ClassType {
  placement
  oneVOne
  group
  workshop
}

enum PodcastLevel {
  beginner
  intermediate
  advanced
}

model User {
  id                  String       @id @default(cuid()) @map("_id")
  fName               String
  lName               String?
  email               String       @unique
  additionalEmails    String[]
  password            String
  pNumber             String       @unique
  addintionalPNumbers String[]
  role                Role         @default(student)
  image               String?
  ClassUsers          ClassUsers[]
  Class               Class[]
  Writing             Writing[]

  Blog Blog[]

  Payment             Payment[]
  WritingCharge       WritingCharge[]
  Notifs              Notifs[]
  TeacherProfile      TeacherProfile?
  VideoCourse         VideoCourse[]
  Comment             Comment[]
  CommentAnswer       CommentAnswer[]
  CoursePayment       CoursePayment[]
  FreeVideoCourseUser FreeVideoCourseUser[]
  agents              String[]
}

model TeacherProfile {
  id                 String  @id @default(cuid()) @map("_id")
  description        String
  persianDescription String?
  bio                String
  persianBio         String?
  teacher            User    @relation(fields: [teacherId], references: [id])
  teacherId          String  @unique
}

model Class {
  id String @id @default(cuid()) @map("_id")

  ClassUsers      ClassUsers[]
  teacher         User         @relation(fields: [teacherId], references: [id])
  teacherId       String
  title           String
  persianTitle    String
  type            ClassType
  price           String?
  discountedPrice String       @default("0")
  discount        String       @default("0")
  capacity        Int
  days            String[]
  date            DateTime?
  duration        String[]
  times           String[]
  prerequisites   String[]
  outline         String[]
  imageLink       String?
  imageName       String?
  createdAt       DateTime     @default(now())
  Payment         Payment[]
  link            String
  Notifs          Notifs[]
}

model ClassUsers {
  id       String @id @default(cuid()) @map("_id")
  classId  String
  class    Class  @relation(fields: [classId], references: [id])
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  date     String
  time     String
  capacity Int
}

model Writing {
  id            String          @id @default(cuid()) @map("_id")
  creatorId     String
  creator       User            @relation(fields: [creatorId], references: [id])
  name          String?
  teacherId     String
  email         String?
  subject       String?
  subjectImgURL String?
  writing       String?
  status        WritingStatus   @default(pending)
  writingAnswer writingAnswer[]
  writingLink   String?
  createdAt     DateTime        @default(now())
}

model writingAnswer {
  id          String   @id @default(cuid()) @map("_id")
  writingId   String   @unique
  writing     Writing  @relation(fields: [writingId], references: [id])
  writingSelf String
  createdAt   DateTime @default(now())
  band        String
}

model WritingCharge {
  id            String @id @default(cuid()) @map("_id")
  user          User   @relation(fields: [userId], references: [id])
  userId        String @unique
  writingCharge Int
}

model Blog {
  id         String   @id @default(cuid()) @map("_id")
  title      String
  image      String?
  author     User     @relation(fields: [authorId], references: [id])
  categories String
  text       String
  createdAt  DateTime @default(now())
  authorId   String
  bucketKey  String?
  trend      Boolean  @default(false)
  english    Boolean  @default(false)
}

model Otp {
  id      String @id @default(cuid()) @map("_id")
  pNumber String @unique
  otp     Int    @unique
}

model Category {
  id    String @id @default(cuid()) @map("_id")
  title String @unique

  value String
}

model Notifs {
  id            String       @id @default(cuid()) @map("_id")
  title         String
  status        NotifStat    @default(unread)
  type          NotifType
  user          User         @relation(fields: [userId], references: [id])
  createdAt     DateTime     @default(now())
  userId        String
  classId       String?
  cls           Class?       @relation(fields: [classId], references: [id])
  classTime     String?
  videoCourseId String?
  videoCourse   VideoCourse? @relation(fields: [videoCourseId], references: [id])
}

model Payment {
  id        String  @id @default(cuid()) @map("_id")
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  resnumber String  @unique
  price     Int
  payed     Boolean @default(false)
  class     Class?  @relation(fields: [classId], references: [id])
  classId   String?

  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  time      String?
  date      DateTime?
  type      PaymentType
}

model VideoCourse {
  id                       String                @id @default(cuid()) @map("_id")
  title                    String
  description              String
  updatedAt                DateTime              @default(now())
  teacherId                String
  teacher                  User                  @relation(fields: [teacherId], references: [id])
  explenation              String
  videoCourseSession       VideoCourseSession[]
  Comment                  Comment[]
  thumbnailLink            String
  thumbnailName            String?
  price                    Int
  discountedPrice          String                @default("0")
  discount                 String                @default("0")
  materialsLink            String
  materialsName            String?
  materialsGoogleDriveLink String?
  category                 VideoCourseCat        @default(english)
  prerequisities           String[]
  Notifs                   Notifs[]
  FreeVideoCourseUser      FreeVideoCourseUser[]
}

model VideoCourseSession {
  id            String      @id @default(cuid()) @map("_id")
  title         String
  video         String
  course        VideoCourse @relation(fields: [videoCourseId], references: [id])
  videoCourseId String
  Comment       Comment[]
  createdAt     DateTime    @default(now())
  duration      Int
  index         Int
  videoName     String
}

model FreeVideoCourseUser {
  id String @id @default(cuid()) @map("_id")

  videoCourseId String
  videoCourse   VideoCourse @relation(fields: [videoCourseId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
}

model Comment {
  id                   String              @id @default(cuid()) @map("_id")
  createdAt            DateTime            @default(now())
  content              String
  commentCreator       User                @relation(fields: [commentCreatorId], references: [id])
  CommentAnswer        CommentAnswer[]
  video                VideoCourse?        @relation(fields: [videoCourseId], references: [id])
  videoCourseId        String?
  videoCourseSession   VideoCourseSession? @relation(fields: [videoCourseSessionId], references: [id])
  videoCourseSessionId String?
  commentCreatorId     String
  verified             Boolean             @default(false)
}

model CommentAnswer {
  id              String   @id @default(cuid()) @map("_id")
  createdAt       DateTime @default(now())
  answerCreator   User     @relation(fields: [answerCreatorId], references: [id])
  content         String
  comment         Comment  @relation(fields: [commentId], references: [id])
  commentId       String
  answerCreatorId String
}

model CoursePayment {
  id        String  @id @default(cuid()) @map("_id")
  courseId  String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  resnumber String  @unique
  verified  Boolean @default(false)
}

model TeacherComment {
  id          String @id @default(cuid()) @map("_id")
  message     String
  teacherId   String
  teacherName String
  userId      String
  userName    String
}

model Email {
  id    String @id @default(cuid()) @map("_id")
  email String
}

model Podcast {
  id          String       @id @default(cuid()) @map("_id")
  name        String
  imageLink   String
  imageName   String
  voiceLink   String
  voiceName   String
  duration    Int
  trend       Boolean      @default(false)
  categories  String[]
  level       PodcastLevel @default(beginner)
  description String       @default("Test description")
}

model livePodcast {
  id   String @id @default(cuid()) @map("_id")
  link String @unique
}
